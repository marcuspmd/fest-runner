{
  "name": "flow-test-runner",
  "displayName": "Flow Test Runner",
  "description": "Execute and manage Flow Test Engine tests directly from VS Code",
  "version": "0.1.2",
  "publisher": "marcuspmd",
  "repository": {
    "type": "git",
    "url": "https://github.com/marcuspmd/fest-runner"
  },
  "license": "MIT",
  "icon": "media/icon.png",
  "engines": {
    "vscode": "^1.75.0"
  },
  "categories": [
    "Testing",
    "Other"
  ],
  "activationEvents": [
    "workspaceContains:**/*.yml",
    "workspaceContains:**/*.yaml"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "flowTestRunnerContainer",
          "title": "Flow Tests",
          "icon": "media/icon.svg"
        }
      ]
    },
    "views": {
      "flowTestRunnerContainer": [
        {
          "id": "flowTestExplorer",
          "name": "Flow Tests Engine",
          "icon": "media/icon.png"
        }
      ]
    },
    "commands": [
      {
        "command": "flow-test-runner.refresh",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "command": "flow-test-runner.runTest",
        "title": "Run Test",
        "icon": "$(play)"
      },
      {
        "command": "flow-test-runner.runSuite",
        "title": "Run Suite",
        "icon": "$(play-circle)"
      },
      {
        "command": "flow-test-runner.runWithCache",
        "title": "Run Using Cached Inputs",
        "icon": "$(history)"
      },
      {
        "command": "flow-test-runner.runAll",
        "title": "Run All Tests",
        "icon": "$(run-all)"
      },
      {
        "command": "flow-test-runner.filterTests",
        "title": "Filter Tests",
        "icon": "$(search)"
      },
      {
        "command": "flow-test-runner.clearFilter",
        "title": "Clear Test Filter",
        "icon": "$(clear-all)"
      },
      {
        "command": "flow-test-runner.viewLatestResults",
        "title": "View Latest Results",
        "icon": "$(preview)"
      },
      {
        "command": "flow-test-runner.generateGraph",
        "title": "Generate Discovery Graph",
        "icon": "$(graph)"
      },
      {
        "command": "flow-test-runner.openTest",
        "title": "Open Test File",
        "icon": "$(go-to-file)"
      },
      {
        "command": "flow-test-runner.retest",
        "title": "Retest Last",
        "icon": "$(debug-restart)"
      },
      {
        "command": "flow-test-runner.viewResults",
        "title": "View Results",
        "icon": "$(preview)"
      },
      {
        "command": "flow-test-runner.createConfig",
        "title": "Create Config File",
        "icon": "$(new-file)"
      },
      {
        "command": "flow-test-runner.selectConfig",
        "title": "Select Config File",
        "icon": "$(folder-opened)"
      },
      {
        "command": "flow-test-runner.clearInputCache",
        "title": "Clear Input Cache",
        "icon": "$(clear-all)"
      },
      {
        "command": "flow-test-runner.showCachedInputs",
        "title": "Show Cached Inputs",
        "icon": "$(list-unordered)"
      },
      {
        "command": "flow-test-runner.editCachedInput",
        "title": "Edit Cached Input",
        "icon": "$(edit)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "flow-test-runner.runAll",
          "when": "view == flowTestExplorer",
          "group": "navigation@0"
        },
        {
          "command": "flow-test-runner.refresh",
          "when": "view == flowTestExplorer",
          "group": "navigation@1"
        },
        {
          "command": "flow-test-runner.retest",
          "when": "view == flowTestExplorer",
          "group": "navigation@2"
        },
        {
          "command": "flow-test-runner.generateGraph",
          "when": "view == flowTestExplorer",
          "group": "navigation@3"
        },
        {
          "command": "flow-test-runner.viewLatestResults",
          "when": "view == flowTestExplorer",
          "group": "navigation@4"
        },
        {
          "command": "flow-test-runner.filterTests",
          "when": "view == flowTestExplorer",
          "group": "navigation@5"
        },
        {
          "command": "flow-test-runner.clearFilter",
          "when": "view == flowTestExplorer && flowTestRunner.filterActive",
          "group": "navigation@6"
        },
        {
          "command": "flow-test-runner.createConfig",
          "when": "view == flowTestExplorer",
          "group": "secondary@1"
        },
        {
          "command": "flow-test-runner.selectConfig",
          "when": "view == flowTestExplorer",
          "group": "secondary@2"
        }
      ],
      "view/item/context": [
        {
          "command": "flow-test-runner.runTest",
          "when": "view == flowTestExplorer && viewItem == step-with-id",
          "group": "inline@1"
        },
        {
          "command": "flow-test-runner.runSuite",
          "when": "view == flowTestExplorer && viewItem == suite",
          "group": "inline@1"
        },
        {
          "command": "flow-test-runner.runWithCache",
          "when": "view == flowTestExplorer && viewItem =~ /suite|step-with-id/",
          "group": "inline@2"
        },
        {
          "command": "flow-test-runner.viewResults",
          "when": "view == flowTestExplorer && viewItem =~ /suite|step/",
          "group": "inline@3"
        },
        {
          "command": "flow-test-runner.openTest",
          "when": "view == flowTestExplorer && viewItem =~ /suite|step/",
          "group": "inline@4"
        }
      ],
      "commandPalette": [
        {
          "command": "flow-test-runner.retest",
          "when": "workspaceHasFlowTests"
        },
        {
          "command": "flow-test-runner.viewLatestResults",
          "when": "workspaceHasFlowTests"
        },
        {
          "command": "flow-test-runner.runAll",
          "when": "workspaceHasFlowTests"
        },
        {
          "command": "flow-test-runner.viewResults",
          "when": "workspaceHasFlowTests"
        },
        {
          "command": "flow-test-runner.generateGraph",
          "when": "workspaceHasFlowTests"
        },
        {
          "command": "flow-test-runner.filterTests",
          "when": "workspaceHasFlowTests"
        },
        {
          "command": "flow-test-runner.clearFilter",
          "when": "workspaceHasFlowTests && flowTestRunner.filterActive"
        },
        {
          "command": "flow-test-runner.createConfig",
          "when": "workspaceHasFlowTests"
        },
        {
          "command": "flow-test-runner.selectConfig",
          "when": "workspaceHasFlowTests"
        },
        {
          "command": "flow-test-runner.clearInputCache",
          "when": "workspaceHasFlowTests"
        },
        {
          "command": "flow-test-runner.showCachedInputs",
          "when": "workspaceHasFlowTests"
        },
        {
          "command": "flow-test-runner.editCachedInput",
          "when": "workspaceHasFlowTests"
        }
      ]
    },
    "configuration": {
      "title": "Flow Test Runner",
      "properties": {
        "flowTestRunner.command": {
          "type": "string",
          "default": "flow-test-engine",
          "description": "Command to execute Flow Test Engine"
        },
        "flowTestRunner.configFile": {
          "type": "string",
          "description": "Path to custom Flow Test configuration file (relative to workspace or absolute)"
        },
        "flowTestRunner.outputFormat": {
          "type": "string",
          "enum": [
            "json",
            "html",
            "both"
          ],
          "default": "both",
          "description": "Output format for test results"
        },
        "flowTestRunner.timeout": {
          "type": "number",
          "default": 30000,
          "description": "Timeout for test execution in milliseconds"
        },
        "flowTestRunner.retryCount": {
          "type": "number",
          "default": 0,
          "minimum": 0,
          "description": "Number of retries for failed tests"
        },
        "flowTestRunner.graphCommand": {
          "type": "string",
          "default": "flow-test-engine",
          "description": "Command used to generate Flow Test discovery graphs"
        },
        "flowTestRunner.graphDirection": {
          "type": "string",
          "enum": [
            "TD",
            "LR",
            "BT",
            "RL"
          ],
          "default": "TD",
          "description": "Default direction for generated Mermaid discovery graphs"
        },
        "flowTestRunner.graphOutput": {
          "type": "string",
          "default": "flow-discovery.mmd",
          "description": "Default output path (relative or absolute) for generated discovery graphs"
        },
        "flowTestRunner.graphNoOrphans": {
          "type": "boolean",
          "default": false,
          "description": "Hide orphan nodes when generating discovery graphs"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run build",
    "build": "npm run typecheck && npm run bundle",
    "typecheck": "tsc --noEmit",
    "bundle": "esbuild src/extension.ts --bundle --format=cjs --platform=node --external:vscode --external:yaml --sourcemap --outdir=dist",
    "watch": "esbuild src/extension.ts --bundle --format=cjs --platform=node --external:vscode --external:yaml --sourcemap --outdir=dist --watch",
    "test": "vitest run",
    "test:watch": "vitest"
  },
  "devDependencies": {
    "@types/node": "^18.x",
    "@types/vscode": "^1.75.0",
    "esbuild": "^0.25.10",
    "typescript": "^4.9.4",
    "vitest": "^3.2.4"
  },
  "dependencies": {
    "yaml": "^2.3.4"
  }
}